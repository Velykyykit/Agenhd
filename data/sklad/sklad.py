import os
import json
import gspread
import asyncio
from fpdf import FPDF
from datetime import datetime
import pytz
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery, WebAppInfo
from menu.keyboards import get_restart_keyboard
from urllib.parse import urlencode

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å–æ–≤–æ—ó –∑–æ–Ω–∏ –¥–ª—è –ö–∏—î–≤–∞
kyiv_tz = pytz.timezone("Europe/Kiev")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —ñ–∑ JSON-—Ä—è–¥–∫–∞
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE")
if not CREDENTIALS_FILE:
    raise ValueError("‚ùå –ó–º—ñ–Ω–Ω–∞ CREDENTIALS_FILE –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
try:
    CREDENTIALS_JSON = json.loads(CREDENTIALS_FILE)
except json.JSONDecodeError as e:
    raise ValueError(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É JSON –≤ CREDENTIALS_FILE: {e}")

FONT_PATH = os.path.join("/app/config/fonts", "DejaVuSans.ttf")

async def get_sklad_menu(user_data: dict):
    """
    –§–æ—Ä–º—É—î –º–µ–Ω—é –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É —Å–∫–ª–∞–¥—É.
    URL WebApp –æ—Ç—Ä–∏–º—É—î query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ —ñ–º'—è–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    user_name = user_data.get("name", "–Ω–µ–∑–Ω–∞–π–æ–º–∏–π")
    user_phone = user_data.get("phone", "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
    params = urlencode({"name": user_name, "phone": user_phone})
    url = f"https://velykyykit.github.io/Agenhd/webapp/order/order.html?{params}"
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üõí –ó—Ä–æ–±–∏—Ç–∏ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è",
            web_app=WebAppInfo(url=url)
        )],
        [InlineKeyboardButton(text="üìä –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ù–∞—è–≤–Ω—ñ—Å—Ç—å", callback_data="check_stock")]
    ])

async def handle_sklad(message: types.Message, user_data: dict):
    """–û–±—Ä–æ–±–∫–∞ —Ä–æ–∑–¥—ñ–ª—É —Å–∫–ª–∞–¥—É."""
    menu = await get_sklad_menu(user_data)
    await message.answer("üì¶ –í–∏ —É —Ä–æ–∑–¥—ñ–ª—ñ —Å–∫–ª–∞–¥—É. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=menu)

async def get_all_stock():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–∫–ª–∞–¥—É."""
    gc = gspread.service_account_from_dict(CREDENTIALS_JSON)
    sh = gc.open_by_key(os.getenv("SHEET_SKLAD"))
    worksheet = sh.worksheet("SKLAD")
    data = await asyncio.to_thread(worksheet.get_all_values)
    stock_items = [{
        "id": row[0],
        "course": row[1],
        "name": row[2],
        "stock": int(row[3]) if row[3].isdigit() else 0,
        "available": int(row[4]) if row[4].isdigit() else 0,
        "price": int(row[5]) if row[5].isdigit() else 0
    } for row in data[1:]]
    return stock_items

async def show_all_stock(call: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    await call.answer()
    wait_message = await call.message.answer("‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ, –¥–æ–∫—É–º–µ–Ω—Ç —Ñ–æ—Ä–º—É—î—Ç—å—Å—è...")
    try:
        if not os.path.exists(FONT_PATH):
            await call.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª —à—Ä–∏—Ñ—Ç—É DejaVuSans.ttf –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        items = await get_all_stock()
        now = datetime.now(kyiv_tz).strftime("%Y-%m-%d_%H-%M")
        filename = f"sklad_HD_{now}.pdf"
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font("DejaVu", "", FONT_PATH, uni=True)
        pdf.set_font("DejaVu", '', 12)
        pdf.cell(200, 10, f"–ù–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ (—Å—Ç–∞–Ω–æ–º –Ω–∞ {now})", ln=True, align="C")
        pdf.ln(10)
        pdf.cell(30, 8, "ID", border=1, align="C")
        pdf.cell(80, 8, "–¢–æ–≤–∞—Ä", border=1, align="C")
        pdf.cell(30, 8, "–ù–∞ —Å–∫–ª–∞–¥—ñ", border=1, align="C")
        pdf.cell(30, 8, "–¶—ñ–Ω–∞", border=1, align="C")
        pdf.ln()
        for item in items:
            pdf.cell(30, 8, str(item["id"]), border=1, align="C")
            pdf.cell(80, 8, item["name"], border=1, align="L")
            pdf.cell(30, 8, str(item["stock"]), border=1, align="C")
            pdf.cell(30, 8, f"{item['price']}‚Ç¥", border=1, align="C")
            pdf.ln()
        pdf.output(filename)
        await call.message.bot.delete_message(chat_id=call.message.chat.id, message_id=wait_message.message_id)
        file = FSInputFile(filename)
        await call.message.answer_document(file, caption="üìÑ –û—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞—è–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ.")
        os.remove(filename)
    except Exception as e:
        await call.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞!")
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")
