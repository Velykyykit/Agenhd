from fpdf import FPDF
import os
import gspread
from datetime import datetime
import pytz
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from menu.keyboards import get_restart_keyboard

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –¥–ª—è –ö–∏—î–≤–∞
kyiv_tz = pytz.timezone("Europe/Kiev")

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —à–ª—è—Ö –¥–æ credentials.json —ñ–∑ –∑–º—ñ–Ω–Ω–∏—Ö Railway
CREDENTIALS_PATH = os.path.join("/app", os.getenv("CREDENTIALS_FILE"))
print("üîç –®–ª—è—Ö –¥–æ credentials.json:", CREDENTIALS_PATH)
print("üìÇ –§–∞–π–ª —ñ—Å–Ω—É—î:", os.path.exists(CREDENTIALS_PATH))

def get_sklad_menu():
    """–ú–µ–Ω—é —Å–∫–ª–∞–¥—É."""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="order"))
    markup.add(InlineKeyboardButton("üìä –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ù–∞—è–≤–Ω—ñ—Å—Ç—å", callback_data="check_stock"))
    return markup

def handle_sklad(bot, message):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–∫–ª–∞–¥—É."""
    bot.send_message(message.chat.id, "üì¶ –í–∏ —É —Ä–æ–∑–¥—ñ–ª—ñ —Å–∫–ª–∞–¥—É. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_sklad_menu())
    bot.send_message(message.chat.id, "üîÑ –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=get_restart_keyboard())

def get_all_stock():
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑—ñ —Å–∫–ª–∞–¥—É."""
    gc = gspread.service_account(filename=CREDENTIALS_PATH)
    sh = gc.open_by_key(os.getenv("SHEET_SKLAD"))
    worksheet = sh.worksheet("SKLAD")

    data = worksheet.get_all_values()
    stock_items = []

    for row in data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        stock_items.append({
            "id": row[0],
            "course": row[1],
            "name": row[2],
            "stock": int(row[3]) if row[3].isdigit() else 0,
            "available": int(row[4]) if row[4].isdigit() else 0,
            "price": int(row[5]) if row[5].isdigit() else 0
        })

    return stock_items

def show_all_stock(bot, message):
    """–ì–µ–Ω–µ—Ä—É—î PDF-—Ñ–∞–π–ª –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    wait_message = bot.send_message(message.chat.id, "‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ, –¥–æ–∫—É–º–µ–Ω—Ç —Ñ–æ—Ä–º—É—î—Ç—å—Å—è...")

    try:
        items = get_all_stock()
        now = datetime.now(kyiv_tz).strftime("%Y-%m-%d_%H-%M")

        filename = f"sklad_HD_{now}.pdf"

        pdf = FPDF()
        pdf.set_font("Helvetica", "", 12)  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç—É
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        pdf.set_font("DejaVu", "", 12)

        pdf.cell(200, 10, f"–ù–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ (—Å—Ç–∞–Ω–æ–º –Ω–∞ {now})", ln=True, align="C")
        pdf.ln(10)

        pdf.set_font("DejaVu", "", 10)
        pdf.cell(20, 8, "ID", border=1, align="C")
        pdf.cell(50, 8, "–ö—É—Ä—Å", border=1, align="C")
        pdf.cell(50, 8, "–¢–æ–≤–∞—Ä", border=1, align="C")
        pdf.cell(20, 8, "–ù–∞ —Å–∫–ª–∞–¥—ñ", border=1, align="C")
        pdf.cell(20, 8, "–î–æ—Å—Ç—É–ø–Ω–æ", border=1, align="C")
        pdf.cell(20, 8, "–¶—ñ–Ω–∞", border=1, align="C")
        pdf.ln()

        for item in items:
            pdf.cell(20, 8, str(item["id"]), border=1, align="C")
            pdf.cell(50, 8, item["course"], border=1, align="L")
            pdf.cell(50, 8, item["name"], border=1, align="L")
            pdf.cell(20, 8, str(item["stock"]), border=1, align="C")
            pdf.cell(20, 8, str(item["available"]), border=1, align="C")
            pdf.cell(20, 8, f"{item['price']}‚Ç¥", border=1, align="C")
            pdf.ln()

        pdf.output(filename, "F")

        bot.delete_message(chat_id=message.chat.id, message_id=wait_message.message_id)

        with open(filename, "rb") as file:
            bot.send_document(message.chat.id, file, caption="üìÑ –û—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞—è–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ.")

        os.remove(filename)

    except Exception as e:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞!", chat_id=message.chat.id, message_id=wait_message.message_id)
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")

def show_courses_for_order(bot, message):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."""
    gc = gspread.service_account(filename=CREDENTIALS_PATH)
    sh = gc.open_by_key(os.getenv("SHEET_SKLAD"))
    worksheet = sh.worksheet("dictionary")  # –ê—Ä–∫—É—à —ñ–∑ –∫—É—Ä—Å–∞–º–∏

    courses = worksheet.col_values(1)  # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ω–∞–∑–≤–∏ –∫—É—Ä—Å—ñ–≤
    if not courses:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    markup = InlineKeyboardMarkup()
    for course in courses:
        markup.add(InlineKeyboardButton(course, callback_data=f"course_{course}"))

    bot.send_message(message.chat.id, "üìö –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=markup)
