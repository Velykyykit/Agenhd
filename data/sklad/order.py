import os
import gspread
from aiogram import types
from aiogram_dialog import Dialog, Window
from aiogram_dialog.widgets.kbd import Button, Row, Column
from aiogram_dialog.widgets.text import Const, Format
from aiogram.fsm.state import StatesGroup, State

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Google Sheets
SHEET_SKLAD = os.getenv("SHEET_SKLAD")
CREDENTIALS_PATH = os.path.join("/app", os.getenv("CREDENTIALS_FILE"))

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
gc = gspread.service_account(filename=CREDENTIALS_PATH)
sh = gc.open_by_key(SHEET_SKLAD)
worksheet_courses = sh.worksheet("dictionary")
worksheet_items = sh.worksheet("SKLAD")


# –ö–ª–∞—Å–∏ —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É
class OrderSG(StatesGroup):
    select_course = State()
    select_item = State()


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫—É—Ä—Å—ñ–≤ (–¥–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ 10)
async def get_courses(**kwargs):
    courses = worksheet_courses.get_all_records()
    courses = [{"name": c["course"], "short": c["short"]} for c in courses][:20]  # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ 20 –∫—É—Ä—Å—ñ–≤

    col1 = courses[:10]  # –ü–µ—Ä—à–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å (10 –∫—É—Ä—Å—ñ–≤)
    col2 = courses[10:]  # –î—Ä—É–≥–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å (10 –∫—É—Ä—Å—ñ–≤)

    return {"col1": col1, "col2": col2}


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫—É—Ä—Å—É
async def get_items(dialog_manager, **kwargs):
    selected_course = dialog_manager.dialog_data.get("selected_course")
    if not selected_course:
        return {"items": []}

    all_items = worksheet_items.get_all_records()
    items = [item for item in all_items if item["course"] == selected_course]

    return {"items": items}


# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫—É—Ä—Å
async def select_course(callback: types.CallbackQuery, button: Button, manager):
    manager.dialog_data["selected_course"] = button.widget_id
    await manager.switch_to(OrderSG.select_item)


# –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤
async def change_quantity(callback: types.CallbackQuery, button: Button, manager, item_id: str, delta: int):
    cart = manager.dialog_data.setdefault("cart", {})
    cart[item_id] = max(cart.get(item_id, 0) + delta, 0)
    await manager.update()


# –í—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É
course_window = Window(
    Const("üìö –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å:"),
    Row(
        Column(
            *[
                Button(Format("üéì {item[name]}"), id=item["short"], on_click=select_course)
                for item in (await get_courses())["col1"]
            ]
        ),
        Column(
            *[
                Button(Format("üéì {item[name]}"), id=item["short"], on_click=select_course)
                for item in (await get_courses())["col2"]
            ]
        ),
    ),
    state=OrderSG.select_course,
)

# –í—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—ñ–≤
item_window = Window(
    Const("üõç –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏:"),
    *[
        Row(
            Format("{item[name]} - {item[price]} –≥—Ä–Ω üõí {cart.get(item[id], 0)} —à—Ç"),
            Button(Const("‚ûñ"), id=f"minus_{item['id']}", on_click=lambda c, w, m, item_id=item["id"]: change_quantity(c, w, m, item_id, -1)),
            Button(Const("‚ûï"), id=f"plus_{item['id']}", on_click=lambda c, w, m, item_id=item["id"]: change_quantity(c, w, m, item_id, 1)),
        )
        for item in (await get_items())["items"]
    ],
    state=OrderSG.select_item,
)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
order_dialog = Dialog(course_window, item_window)
