import os
import gspread
import time
from aiogram import types
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import ScrollingGroup, Select, Button, Row
from aiogram_dialog.widgets.text import Const, Format
from aiogram.fsm.state import StatesGroup, State

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
CREDENTIALS_PATH = os.path.join("/app", os.getenv("CREDENTIALS_FILE"))
SHEET_SKLAD = os.getenv("SHEET_SKLAD")

gc = gspread.service_account(filename=CREDENTIALS_PATH)
sh = gc.open_by_key(SHEET_SKLAD)
worksheet_courses = sh.worksheet("dictionary")
worksheet_sklad = sh.worksheet("SKLAD")

# –ö–µ—à –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
CACHE_EXPIRY = 300  # 5 —Ö–≤–∏–ª–∏–Ω
cache = {
    "courses": {"data": [], "timestamp": 0},
    "products": {"data": {}, "timestamp": 0}
}

# –°—Ç–∞–Ω –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É —ñ —Ç–æ–≤–∞—Ä—É
class OrderSG(StatesGroup):
    select_course = State()
    show_products = State()
    select_quantity = State()

async def get_courses(**kwargs):
    now = time.time()
    if now - cache["courses"]["timestamp"] < CACHE_EXPIRY:
        return {"courses": cache["courses"]["data"]}
    
    rows = worksheet_courses.get_all_records()
    courses = [{"name": row["course"], "short": row["short"]} for row in rows][:20]
    
    cache["courses"] = {"data": courses, "timestamp": now}
    return {"courses": courses}

async def get_products(dialog_manager: DialogManager, **kwargs):
    selected_course = dialog_manager.dialog_data.get("selected_course", None)
    if not selected_course:
        return {"products": "‚ùå –¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."}
    
    now = time.time()
    if selected_course in cache["products"] and now - cache["products"][selected_course]["timestamp"] < CACHE_EXPIRY:
        return {"products": cache["products"][selected_course]["data"]}
    
    rows = worksheet_sklad.get_all_records()
    products = [
        f"üÜî {row['id']} | {row['name']} - üí∞ {row['price']} –≥—Ä–Ω"
        for row in rows if row["course"] == selected_course
    ]
    
    cache["products"][selected_course] = {"data": "\n".join(products), "timestamp": now}
    return {"products": "\n".join(products)}

async def select_course(callback: types.CallbackQuery, widget, manager: DialogManager, item_id: str):
    manager.dialog_data["selected_course"] = item_id
    await callback.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {item_id}")
    await manager.next()

async def select_product(callback: types.CallbackQuery, widget, manager: DialogManager):
    """–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É."""
    manager.dialog_data["quantity"] = 1  # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å = 1
    await manager.next()

async def change_quantity(callback: types.CallbackQuery, widget, manager: DialogManager, action: str):
    """–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∞–±–æ –∑–º–µ–Ω—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É."""
    quantity = manager.dialog_data.get("quantity", 1)
    
    if action == "increase":
        quantity += 1
    elif action == "decrease" and quantity > 1:
        quantity -= 1
    
    manager.dialog_data["quantity"] = quantity
    await callback.answer()
    await manager.dialog().update()

async def add_to_cart(callback: types.CallbackQuery, widget, manager: DialogManager):
    """–î–æ–¥–∞—î –≤–∏–±—Ä–∞–Ω–∏–π —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫."""
    selected_course = manager.dialog_data.get("selected_course", "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –∫—É—Ä—Å")
    quantity = manager.dialog_data.get("quantity", 1)
    await callback.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä—É –∑ –∫—É—Ä—Å—É {selected_course} —É –∫–æ—à–∏–∫!")
    await manager.done()

course_window = Window(
    Const("üìö –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å:"),
    ScrollingGroup(
        Select(
            Format("üéì {item[name]}"),
            items="courses",
            id="course_select",
            item_id_getter=lambda item: item["short"],
            on_click=select_course
        ),
        width=2,
        height=10,
        id="courses_scroller",
        hide_on_single_page=True
    ),
    state=OrderSG.select_course,
    getter=get_courses
)

product_window = Window(
    Format("üì¶ –¢–æ–≤–∞—Ä–∏ –∫—É—Ä—Å—É {dialog_data[selected_course]}:\n\n{products}"),
    Row(
        Button(Const("üõí –í–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä"), id="select_product", on_click=select_product),
    ),
    Row(
        Button(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_courses", on_click=lambda c, w, m: m.back()),
    ),
    state=OrderSG.show_products,
    getter=get_products
)

quantity_window = Window(
    Format("üõí –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É:"),
    Row(
        Button(Const("‚ûñ"), id="decrease_quantity", on_click=lambda c, w, m: change_quantity(c, w, m, "decrease")),
        Button(Format("{dialog_data[quantity]}"), id="quantity_display"),
        Button(Const("‚ûï"), id="increase_quantity", on_click=lambda c, w, m: change_quantity(c, w, m, "increase")),
    ),
    Row(
        Button(Const("‚úÖ –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫"), id="confirm_quantity", on_click=add_to_cart),
        Button(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_products", on_click=lambda c, w, m: m.back()),
    ),
    state=OrderSG.select_quantity
)

order_dialog = Dialog(course_window, product_window, quantity_window)
