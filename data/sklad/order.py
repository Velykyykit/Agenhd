import os
import gspread
import time
from aiogram import types
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Button, Row
from aiogram_dialog.widgets.text import Const, Format
from aiogram.fsm.state import StatesGroup, State

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
CREDENTIALS_PATH = os.path.join("/app", os.getenv("CREDENTIALS_FILE"))
SHEET_SKLAD = os.getenv("SHEET_SKLAD")

gc = gspread.service_account(filename=CREDENTIALS_PATH)
sh = gc.open_by_key(SHEET_SKLAD)
worksheet_courses = sh.worksheet("dictionary")
worksheet_sklad = sh.worksheet("SKLAD")

# –ö–µ—à –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
CACHE_EXPIRY = 300  # 5 —Ö–≤–∏–ª–∏–Ω
cache = {
    "courses": {"data": [], "timestamp": 0},
    "products": {"data": {}, "timestamp": 0}  # –ö–µ—à –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—É—Ä—Å—É
}

# –°—Ç–∞–Ω –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É —ñ —Ç–æ–≤–∞—Ä—É
class OrderSG(StatesGroup):
    select_course = State()
    show_products = State()
    select_quantity = State()

async def get_courses(**kwargs):
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ –∑ –∫–µ—à—É –∞–±–æ Google Sheets."""
    now = time.time()
    if now - cache["courses"]["timestamp"] < CACHE_EXPIRY:
        return {"courses": cache["courses"]["data"]}
    
    rows = worksheet_courses.get_all_records()
    courses = [{"name": row["course"], "short": row["short"]} for row in rows][:20]
    
    cache["courses"] = {"data": courses, "timestamp": now}
    return {"courses": courses}

async def get_products(dialog_manager: DialogManager, **kwargs):
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫—É—Ä—Å—É –∑ –∫–µ—à—É –∞–±–æ Google Sheets."""
    selected_course = dialog_manager.dialog_data.get("selected_course", None)
    if not selected_course:
        return {"products": []}
    
    now = time.time()
    if selected_course in cache["products"] and now - cache["products"][selected_course]["timestamp"] < CACHE_EXPIRY:
        return {"products": cache["products"][selected_course]["data"]}
    
    rows = worksheet_sklad.get_all_records()
    products = [
        {"id": row["id"], "name": row["name"], "price": row["price"]}
        for row in rows if row["course"] == selected_course
    ]
    
    cache["products"][selected_course] = {"data": products, "timestamp": now}
    return {"products": products}

async def select_course(callback: types.CallbackQuery, widget, manager: DialogManager, item_id: str):
    manager.dialog_data["selected_course"] = item_id
    manager.dialog_data["quantity"] = 1  # –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
    await callback.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {item_id}")
    await manager.next()

product_window = Window(
    Format("üì¶ –¢–æ–≤–∞—Ä–∏ –∫—É—Ä—Å—É {dialog_data[selected_course]}:\n\n" +
           "\n".join(["{item[id]} | {item[name]} - üí∞ {item[price]} –≥—Ä–Ω" for item in "products"])),
    Row(
        Button(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_courses", on_click=lambda c, w, m: m.back()),
    ),
    state=OrderSG.show_products,
    getter=get_products
)

order_dialog = Dialog(product_window)
