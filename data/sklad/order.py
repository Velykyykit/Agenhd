import asyncio
from aiogram import types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton
from data.sklad.sklad import show_courses_for_order
from menu.keyboards import get_restart_keyboard

# –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
class OrderForm(StatesGroup):
    waiting_for_course = State()
    waiting_for_quantity = State()

async def handle_order_callback(call: types.CallbackQuery, state: FSMContext, bot: types.Bot):
    """–û–±—Ä–æ–±–ª—è—î callback 'order' ‚Äì –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É."""
    await call.answer()
    await show_courses_for_order(bot, call.message)
    await state.set_state(OrderForm.waiting_for_course)

async def process_course_selection(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î callback, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 'course_' ‚Äì –∑–±–µ—Ä—ñ–≥–∞—î –æ–±—Ä–∞–Ω–∏–π –∫—É—Ä—Å —Ç–∞ –ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å."""
    selected_course = call.data[len("course_"):]
    await call.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏: {selected_course}")
    await state.update_data(course=selected_course)
    await call.message.answer("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
    await state.set_state(OrderForm.waiting_for_quantity)

async def process_quantity(message: types.Message, state: FSMContext, get_main_menu_func):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    quantity = message.text
    data = await state.get_data()
    selected_course = data.get("course", "–ù–µ–≤—ñ–¥–æ–º–æ")
    await message.answer(
        f"–í–∏ –∑–∞–º–æ–≤–ª—è—î—Ç–µ {quantity} –æ–¥–∏–Ω–∏—Ü—å –∫—É—Ä—Å—É {selected_course}. –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!"
    )
    await state.clear()
    # –û—Ç—Ä–∏–º—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü—ñ—é-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    main_menu = get_main_menu_func()
    await message.answer("üìå –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=main_menu)
    restart_keyboard = await get_restart_keyboard()
    await message.answer("üîÑ –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=restart_keyboard)

def register_order_handlers(router, get_main_menu_func):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω—å —É —Ä–æ—É—Ç–µ—Ä—ñ.
    get_main_menu_func ‚Äì —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    router.callback_query.register(
        lambda call, state, bot: handle_order_callback(call, state, bot),
        F.data == "order"
    )
    router.callback_query.register(
        process_course_selection,
        lambda call: call.data.startswith("course_")
    )
    router.message.register(
        lambda message, state: process_quantity(message, state, get_main_menu_func),
        OrderForm.waiting_for_quantity
    )
