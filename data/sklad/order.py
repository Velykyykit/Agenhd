import os
import gspread
import logging
from aiogram import types
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import ScrollingGroup, Select, Button, Group
from aiogram_dialog.widgets.text import Const, Format
from aiogram.fsm.state import StatesGroup, State

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è (Railway)
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Google Sheets
SHEET_SKLAD = os.getenv("SHEET_SKLAD")
CREDENTIALS_PATH = os.path.join("/app", os.getenv("CREDENTIALS_FILE"))

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
gc = gspread.service_account(filename=CREDENTIALS_PATH)
sh = gc.open_by_key(SHEET_SKLAD)
worksheet_courses = sh.worksheet("dictionary")
worksheet_sklad = sh.worksheet("SKLAD")

# –°—Ç–∞–Ω –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É —ñ —Ç–æ–≤–∞—Ä—É
class OrderSG(StatesGroup):
    select_course = State()
    show_products = State()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ (–¥–æ 20)
async def get_courses(**kwargs):
    rows = worksheet_courses.get_all_records()
    courses = [{"name": row["course"], "short": row["short"]} for row in rows][:20]
    return {"courses": courses}

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –∫—É—Ä—Å–æ–º
async def get_products(dialog_manager: DialogManager, **kwargs):
    selected_course = dialog_manager.dialog_data.get("selected_course", "‚ùì–ö—É—Ä—Å –Ω–µ –≤–∏–±—Ä–∞–Ω–æ")
    
    if "cart" not in dialog_manager.dialog_data:
        dialog_manager.dialog_data["cart"] = {}
    cart = dialog_manager.dialog_data["cart"]
    
    rows = worksheet_sklad.get_all_records()
    products = [
        {"id": str(row["id"]), "name": row["name"], "price": row["price"]}
        for row in rows if row.get("course") == selected_course
    ]

    return {
        "products": products,
        "selected_course": selected_course,
        "cart": cart,
    }

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É
async def select_course(callback: types.CallbackQuery, widget, manager: DialogManager, item_id: str):
    selected_course = item_id
    manager.dialog_data["selected_course"] = selected_course
    if "cart" not in manager.dialog_data:
        manager.dialog_data["cart"] = {}
    logging.info(f"[COURSE SELECTED] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –æ–±—Ä–∞–≤ –∫—É—Ä—Å: {selected_course}")
    await callback.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {selected_course}")
    await manager.next()

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ + —ñ -
async def update_quantity(callback: types.CallbackQuery, widget, manager: DialogManager):
    if "cart" not in manager.dialog_data:
        manager.dialog_data["cart"] = {}
    cart = manager.dialog_data["cart"]
    action, item_id = callback.data.split("_")  # "plus_123" –∞–±–æ "minus_123"
    
    delta = 1 if action == "plus" else -1
    current_quantity = cart.get(item_id, 0)
    new_quantity = max(0, current_quantity + delta)  # –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –º–µ–Ω—à–µ 0
    cart[item_id] = new_quantity

    logging.info(f"[UPDATE CART] {callback.from_user.id} –∑–º—ñ–Ω–∏–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å {item_id}: {new_quantity}")

    await callback.answer(f"üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_quantity}")
    await manager.show()  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞

# –í—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É
course_window = Window(
    Const("üìö –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å:"),
    ScrollingGroup(
        Select(
            Format("üéì {item[name]}"),
            items="courses",
            id="course_select",
            item_id_getter=lambda item: item["short"],
            on_click=select_course
        ),
        width=2,  
        height=10,
        id="courses_scroller",
        hide_on_single_page=True  
    ),
    state=OrderSG.select_course,
    getter=get_courses
)

# –í—ñ–∫–Ω–æ –≤–∏–≤–æ–¥—É —Ç–æ–≤–∞—Ä—ñ–≤
product_window = Window(
    Format("üì¶ –¢–æ–≤–∞—Ä–∏ –∫—É—Ä—Å—É {selected_course}:")
    ,
    ScrollingGroup(
        Select(
            Format("üÜî {item[id]} | {item[name]} - üí∞ {item[price]} –≥—Ä–Ω | üì¶ {cart.get(item[id], 0) if cart else 0} —à—Ç"),
            items="products",
            id="product_select",
            item_id_getter=lambda item: item["id"],
        ),
        width=1,
        id="products_scroller",
        hide_on_single_page=True
    ),

    Group(
        Button(Const("‚ûñ"), id="minus_button", on_click=update_quantity),
        Button(Const("‚ûï"), id="plus_button", on_click=update_quantity),
        width=2
    ),

    Button(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_courses", on_click=lambda c, w, m: m.back()),
    Button(Const("üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫"), id="add_to_cart", on_click=lambda c, w, m: c.answer("üîπ –ó–∞–≥–ª—É—à–∫–∞: –î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫")),

    state=OrderSG.show_products,
    getter=get_products
)

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–ª–æ–≥
order_dialog = Dialog(course_window, product_window)
