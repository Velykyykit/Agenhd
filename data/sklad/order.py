import os
import json
import gspread
import time
from aiogram import types
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import ScrollingGroup, Select, Button, Row
from aiogram_dialog.widgets.text import Const, Format
from aiogram.fsm.state import StatesGroup, State

# –û—Ç—Ä–∏–º—É—î–º–æ JSON-–æ–±'—î–∫—Ç –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –±–µ–∑ —Ñ–∞–π–ª—É
CREDENTIALS_JSON = json.loads(os.getenv("CREDENTIALS_FILE"))
SHEET_SKLAD = os.getenv("SHEET_SKLAD")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets —á–µ—Ä–µ–∑ JSON
gc = gspread.service_account_from_dict(CREDENTIALS_JSON)
sh = gc.open_by_key(SHEET_SKLAD)
worksheet_courses = sh.worksheet("dictionary")
worksheet_sklad = sh.worksheet("SKLAD")

# –ö–µ—à –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
CACHE_EXPIRY = 300  # 5 —Ö–≤–∏–ª–∏–Ω
cache = {
    "courses": {"data": [], "timestamp": 0},
    "products": {"data": {}, "timestamp": 0}
}

# –°—Ç–∞–Ω –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É —ñ —Ç–æ–≤–∞—Ä—É
class OrderSG(StatesGroup):
    select_course = State()
    show_products = State()
    select_quantity = State()

async def get_courses(**kwargs):
    now = time.time()
    if now - cache["courses"]["timestamp"] < CACHE_EXPIRY:
        return {"courses": cache["courses"]["data"]}
    
    rows = worksheet_courses.get_all_records()
    courses = [{"name": row["course"], "short": row["short"]} for row in rows][:20]
    
    cache["courses"] = {"data": courses, "timestamp": now}
    return {"courses": courses}

async def get_products(dialog_manager: DialogManager, **kwargs):
    selected_course = dialog_manager.dialog_data.get("selected_course", None)
    if not selected_course:
        return {"products": []}
    
    now = time.time()
    if selected_course in cache["products"] and now - cache["products"][selected_course]["timestamp"] < CACHE_EXPIRY:
        return {"products": cache["products"][selected_course]["data"]}
    
    rows = worksheet_sklad.get_all_records()
    products = [
        {"id": str(index), "name": row["name"], "price": row["price"]}
        for index, row in enumerate(rows, start=1) if row["course"] == selected_course
    ]
    
    cache["products"][selected_course] = {"data": products, "timestamp": now}
    return {"products": products}

async def select_course(callback: types.CallbackQuery, widget, manager: DialogManager, item_id: str):
    manager.dialog_data["selected_course"] = item_id
    await callback.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {item_id}")
    await manager.next()

async def select_product(callback: types.CallbackQuery, widget, manager: DialogManager, item_id: str):
    """–ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ —Ç–æ–≤–∞—Ä –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –≤—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"""
    manager.dialog_data["selected_product"] = item_id
    manager.dialog_data["quantity"] = 0  # –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è 0
    await manager.next()

async def change_quantity(callback: types.CallbackQuery, widget, manager: DialogManager, action: str):
    """–ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É"""
    quantity = manager.dialog_data.get("quantity", 0)
    if action == "increase":
        quantity += 1
    elif action == "decrease" and quantity > 0:
        quantity -= 1
    manager.dialog_data["quantity"] = quantity
    await callback.answer()
    await manager.show()  # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∫–Ω–æ

async def confirm_selection(callback: types.CallbackQuery, widget, manager: DialogManager):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"""
    selected_product = manager.dialog_data.get("selected_product", "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä")
    quantity = manager.dialog_data.get("quantity", 0)
    await callback.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä—É {selected_product} —É –∫–æ—à–∏–∫!")
    await manager.done()

course_window = Window(
    Const("üìö –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å:"),
    ScrollingGroup(
        Select(
            Format("üéì {item[name]}"),
            items="courses",
            id="course_select",
            item_id_getter=lambda item: item["short"],
            on_click=select_course
        ),
        width=2,
        height=10,
        id="courses_scroller",
        hide_on_single_page=True
    ),
    state=OrderSG.select_course,
    getter=get_courses
)

product_window = Window(
    Format("üì¶ –¢–æ–≤–∞—Ä–∏ –∫—É—Ä—Å—É {dialog_data[selected_course]}:"),
    ScrollingGroup(
        Select(
            Format("üÜî {item[id]} | {item[name]} - üí∞ {item[price]} –≥—Ä–Ω"),
            items="products",
            id="product_select",
            item_id_getter=lambda item: item["id"],
            on_click=select_product
        ),
        width=1,
        height=10,
        id="products_scroller",
        hide_on_single_page=True
    ),
    Row(
        Button(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_courses", on_click=lambda c, w, m: m.back()),
    ),
    state=OrderSG.show_products,
    getter=get_products
)

quantity_window = Window(
    Format("üñº –§–æ—Ç–æ —Ç–æ–≤–∞—Ä—É —Ç—É—Ç\nüì¶ –¢–æ–≤–∞—Ä: {dialog_data[selected_product]}"),
    Row(
        Button(Const("‚ûñ"), id="decrease_quantity", on_click=lambda c, w, m: change_quantity(c, w, m, "decrease")),
        Button(Format("{dialog_data[quantity]}"), id="quantity_display"),  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
        Button(Const("‚ûï"), id="increase_quantity", on_click=lambda c, w, m: change_quantity(c, w, m, "increase")),
    ),
    Row(
        Button(Const("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"), id="confirm_selection", on_click=confirm_selection),
        Button(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_products", on_click=lambda c, w, m: m.back()),
    ),
    state=OrderSG.select_quantity
)

order_dialog = Dialog(course_window, product_window, quantity_window)
