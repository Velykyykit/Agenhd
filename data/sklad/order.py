from aiogram import Bot, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    Message
)
from aiogram.fsm.state import StatesGroup, State

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–æ–∫–∞–∑—É—î –∫—É—Ä—Å–∏, —ñ —Ç—É, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
from data.sklad.sklad import show_courses_for_order, get_all_stock

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
from menu.keyboards import get_restart_keyboard

class OrderForm(StatesGroup):
    waiting_for_course = State()
    waiting_for_item = State()
    waiting_for_quantity = State()

async def handle_order_callback(call: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "üõí –ó—Ä–æ–±–∏—Ç–∏ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è".
    1) –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ (–∑ –∞—Ä–∫—É—à–∞ 'dictionary').
    2) –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ —É —Å—Ç–∞–Ω waiting_for_course.
    """
    await call.answer()
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤
    await show_courses_for_order(bot, call.message)
    # –£—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É"
    await state.set_state(OrderForm.waiting_for_course)

async def process_course_selection(call: CallbackQuery, state: FSMContext):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î –∫—É—Ä—Å (callback_data="course_...").
    1) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –∫—É—Ä—Å—É —É FSM.
    2) –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ 'SKLAD' –∑–∞ —Ü–∏–º –∫—É—Ä—Å–æ–º.
    3) –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (id, –Ω–∞–∑–≤–∞, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å, –¥–æ—Å—Ç—É–ø–Ω–æ, —Ü—ñ–Ω–∞) —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
    4) –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É.
    5) –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ —É —Å—Ç–∞–Ω waiting_for_item.
    """
    selected_course = call.data[len("course_"):]
    await call.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {selected_course}")
    await state.update_data(course=selected_course)

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ SKLAD
    all_items = await get_all_stock()
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º –∫—É—Ä—Å–æ–º
    filtered_items = [item for item in all_items if item["course"] == selected_course]

    if not filtered_items:
        await call.message.answer("‚ùå –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —É —Ü—å–æ–º—É –∫—É—Ä—Å—ñ.")
        await state.clear()
        return

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —ñ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é (—É HTML)
    text = "–û—Å—å —Ç–æ–≤–∞—Ä–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫—É—Ä—Å—É:<br><br>"
    for item in filtered_items:
            text = "–û—Å—å —Ç–æ–≤–∞—Ä–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫—É—Ä—Å—É:\n\n"
    for item in filtered_items:
        text += (
            f"<b>ID</b>: {item['id']}\n"
            f"<b>–ù–∞–∑–≤–∞</b>: {item['name']}\n"
            f"<b>–ù–∞—è–≤–Ω—ñ—Å—Ç—å</b>: {item['stock']}\n"
            f"<b>–î–æ—Å—Ç—É–ø–Ω–æ</b>: {item['available']}\n"
            f"<b>–¶—ñ–Ω–∞</b>: {item['price']}‚Ç¥\n\n"
        )

    await call.message.answer(text, parse_mode="HTML")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—É
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for item in filtered_items:
        # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: "–ù–∞–∑–≤–∞ (–¶—ñ–Ω–∞‚Ç¥)"
        button_text = f"{item['name']} ({item['price']}‚Ç¥)"
        callback_data = f"item_{item['id']}"
        markup.inline_keyboard.append([
            InlineKeyboardButton(text=button_text, callback_data=callback_data)
        ])

    await call.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=markup)
    await state.set_state(OrderForm.waiting_for_item)

async def process_item_selection(call: CallbackQuery, state: FSMContext):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î —Ç–æ–≤–∞—Ä (callback_data="item_...").
    1) –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä —É —Å–ø–∏—Å–∫—É SKLAD –∑–∞ ID.
    2) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —ñ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –≤ FSM.
    3) –ü—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å.
    4) –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ —É —Å—Ç–∞–Ω waiting_for_quantity.
    """
    selected_item_id = call.data[len("item_"):]
    await call.answer(f"–û–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä ID: {selected_item_id}")

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä
    all_items = await get_all_stock()
    item = next((i for i in all_items if i["id"] == selected_item_id), None)
    if not item:
        await call.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —É FSM
    await state.update_data(item_id=selected_item_id, item_name=item["name"])
    await call.message.answer(
        f"–í–∏ –æ–±—Ä–∞–ª–∏: {item['name']}\n"
        "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:"
    )
    await state.set_state(OrderForm.waiting_for_quantity)

async def process_quantity(message: types.Message, state: FSMContext, get_main_menu_func):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å.
    1) –ó—á–∏—Ç—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å,
    2) –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∑ –∫—É—Ä—Å–æ–º —ñ –Ω–∞–∑–≤–æ—é —Ç–æ–≤–∞—Ä—É),
    3) –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    quantity = message.text
    data = await state.get_data()
    course_name = data.get("course", "–ù–µ–≤—ñ–¥–æ–º–æ")
    item_name = data.get("item_name", "–ù–µ–≤—ñ–¥–æ–º–æ")

    await message.answer(
        f"–í–∏ –∑–∞–º–æ–≤–ª—è—î—Ç–µ {quantity} –æ–¥–∏–Ω–∏—Ü—å —Ç–æ–≤–∞—Ä—É '{item_name}' (–∫—É—Ä—Å: {course_name}). "
        "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!"
    )
    await state.clear()

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    main_menu = get_main_menu_func()
    await message.answer("üìå –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=main_menu)
    restart_keyboard = await get_restart_keyboard()
    await message.answer("üîÑ –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=restart_keyboard)

def register_order_handlers(router, get_main_menu_func):
    """
    –†–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É —Ä–æ—É—Ç–µ—Ä—ñ.
    """
    # –û–±–≥–æ—Ä—Ç–∫–∏ –¥–ª—è await
    async def order_callback_wrapper(call: CallbackQuery, state: FSMContext, bot: Bot):
        await handle_order_callback(call, state, bot)

    async def course_selection_wrapper(call: CallbackQuery, state: FSMContext):
        await process_course_selection(call, state)

    async def item_selection_wrapper(call: CallbackQuery, state: FSMContext):
        await process_item_selection(call, state)

    async def quantity_wrapper(message: Message, state: FSMContext):
        await process_quantity(message, state, get_main_menu_func)

    # 1) –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "üõí –ó—Ä–æ–±–∏—Ç–∏ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    router.callback_query.register(order_callback_wrapper, F.data == "order")

    # 2) –û–±—Ä–∞–Ω–Ω—è –∫—É—Ä—Å—É "course_..."
    router.callback_query.register(course_selection_wrapper, lambda call: call.data.startswith("course_"))

    # 3) –û–±—Ä–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É "item_..."
    router.callback_query.register(item_selection_wrapper, lambda call: call.data.startswith("item_"))

    # 4) –í–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
    router.message.register(quantity_wrapper, OrderForm.waiting_for_quantity)
