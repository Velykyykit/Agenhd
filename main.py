import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import (
    ReplyKeyboardRemove, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage

# –Ü–º–ø–æ—Ä—Ç –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
from config.auth import AuthManager

# –õ–æ–≥—ñ–∫–∞ —Å–∫–ª–∞–¥—É (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ, –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å)
from data.sklad.sklad import handle_sklad, show_all_stock

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
from menu.keyboards import get_phone_keyboard, get_restart_keyboard

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å —á–µ—Ä–µ–∑ aiogram-dialog
from aiogram_dialog.registry import DialogRegistry, StartMode
from data.sklad.order_dialog import order_dialog, OrderSG

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–º–æ–≤–ª–µ–Ω—å ("–î–ª—è –º–µ–Ω–µ")
from data.For_me.me import show_my_orders

logging.basicConfig(level=logging.INFO)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TOKEN")
SHEET_ID = os.getenv("SHEET_ID")
SHEET_SKLAD = os.getenv("SHEET_SKLAD")
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE")
if not TOKEN or not SHEET_ID or not SHEET_SKLAD or not CREDENTIALS_FILE:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Ç–∞ FSM-—Å—Ö–æ–≤–∏—â–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
auth_manager = AuthManager(SHEET_ID, CREDENTIALS_FILE)

def get_main_menu():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –°–∫–ª–∞–¥", callback_data="sklad")],
        [InlineKeyboardButton(text="üìù –ó–∞–≤–¥–∞–Ω–Ω—è", callback_data="tasks")],
        [InlineKeyboardButton(text="üôã‚Äç‚ôÇÔ∏è –î–ª—è –º–µ–Ω–µ", callback_data="forme")]
    ])

@router.message(F.text == "/start")
async def send_welcome(message: types.Message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
    await message.answer(
        "üì≤ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:",
        reply_markup=await get_phone_keyboard()
    )

@router.message(F.contact)
async def handle_contact(message: types.Message):
    """
    –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç —ñ –≤–∏–∫–æ–Ω—É—î –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥—ñ–π—Å–Ω–æ –Ω–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫—É (contact.user_id).
    """
    if message.contact.user_id != message.from_user.id:
        await message.answer(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é 'üì≤ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º' "
            "–¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∞–º–µ –≤–∞—à–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É."
        )
        return

    phone_number = auth_manager.clean_phone_number(message.contact.phone_number)
    logging.info(f"[DEBUG] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä: {phone_number}")
    try:
        user_data = await auth_manager.check_user_in_database(phone_number)
        logging.info(f"[DEBUG] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ auth.py: {user_data}")
        if user_data:
            await message.answer(
                f"‚úÖ –í—ñ—Ç–∞—é, *{user_data['name']}*! –í–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ. üéâ",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardRemove()
            )
            await message.answer("üìå –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=get_main_menu())
            await message.answer(
                "üîÑ –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:",
                reply_markup=await get_restart_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
    except Exception as e:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        logging.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")

@router.callback_query(F.data == "sklad")
async def handle_sklad_call(call: types.CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å —É —Ä–æ–∑–¥—ñ–ª '–°–∫–ª–∞–¥'."""
    await call.answer()
    await handle_sklad(call.message)

@router.callback_query(F.data == "check_stock")
async def handle_stock_check(call: types.CallbackQuery):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ (–≥–µ–Ω–µ—Ä—É—î PDF)."""
    await call.answer()
    await show_all_stock(call)

@router.callback_query(F.data == "tasks")
async def handle_tasks(call: types.CallbackQuery):
    """–†–æ–∑–¥—ñ–ª '–ó–∞–≤–¥–∞–Ω–Ω—è' (–ø–æ–∫–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)."""
    await call.answer()
    await call.message.answer("üìù –†–æ–∑–¥—ñ–ª '–ó–∞–≤–¥–∞–Ω–Ω—è' —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")

@router.callback_query(F.data == "forme")
async def handle_forme(call: types.CallbackQuery):
    """–†–æ–∑–¥—ñ–ª '–î–ª—è –º–µ–Ω–µ' ‚Äì –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å."""
    await call.answer()
    await show_my_orders(call.message)

@router.message(F.text == "üîÑ –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É")
async def restart_handler(message: types.Message):
    """–ö–Ω–æ–ø–∫–∞ '–ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É' –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    await message.answer("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É", reply_markup=ReplyKeyboardRemove())
    await message.answer("üìå –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=get_main_menu())
    await message.answer(
        "üîÑ –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:",
        reply_markup=await get_restart_keyboard()
    )

# –†–µ—î—Å—Ç—Ä—É—î–º–æ –¥—ñ–∞–ª–æ–≥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ aiogram-dialog
registry = DialogRegistry(router)
registry.register(order_dialog)

@router.callback_query(F.data == "order")
async def start_order_dialog(call: types.CallbackQuery, dialog_manager: DialogRegistry):
    await call.answer()
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ —ñ–∑ –ø–µ—Ä—à–∏–º —Å—Ç–∞–Ω–æ–º (OrderSG.select_course)
    await dialog_manager.start(OrderSG.select_course, mode=StartMode.NORMAL)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling."""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
