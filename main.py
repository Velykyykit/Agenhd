import asyncio
import logging
import os
import json
import gspread
from aiohttp import web  # ‚úÖ –î–æ–¥–∞—î–º–æ aiohttp –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import (
    ReplyKeyboardRemove, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
from config.auth import AuthManager

# –õ–æ–≥—ñ–∫–∞ —Å–∫–ª–∞–¥—É
from data.sklad.sklad import handle_sklad, show_all_stock  

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
from menu.keyboards import get_phone_keyboard, get_restart_keyboard

# === aiogram-dialog ===
from aiogram_dialog import setup_dialogs, StartMode
from aiogram_dialog import DialogManager

# –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å (¬´–î–ª—è –º–µ–Ω–µ¬ª)
from data.For_me.me import show_my_orders

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TOKEN")
SHEET_ID = os.getenv("SHEET_ID")
SHEET_SKLAD = os.getenv("SHEET_SKLAD")
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE")

if not TOKEN or not SHEET_ID or not SHEET_SKLAD or not CREDENTIALS_FILE:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö Google Sheets
try:
    CREDENTIALS_JSON = json.loads(CREDENTIALS_FILE)
except json.JSONDecodeError as e:
    raise ValueError(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É JSON –≤ CREDENTIALS_FILE: {e}")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ—Å–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
USER_DATA = {}

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
gc = gspread.service_account_from_dict(CREDENTIALS_JSON)
sh = gc.open_by_key(SHEET_ID)
contact_sheet = sh.worksheet("contact")  # –õ–∏—Å—Ç "contact" –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

auth_manager = AuthManager(SHEET_ID, CREDENTIALS_JSON)

def get_main_menu():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –°–∫–ª–∞–¥", callback_data="sklad")],
        [InlineKeyboardButton(text="üìù –ó–∞–≤–¥–∞–Ω–Ω—è", callback_data="tasks")],
        [InlineKeyboardButton(text="üôã‚Äç‚ôÇÔ∏è –î–ª—è –º–µ–Ω–µ", callback_data="forme")]
    ])

async def update_telegram_id(user_id, telegram_id):
    """–û–Ω–æ–≤–ª—é—î Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –±–∞–∑—ñ, —è–∫—â–æ –≤—ñ–Ω —â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π."""
    try:
        all_data = contact_sheet.get_all_values()
        for idx, row in enumerate(all_data[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if row[0] == user_id:  # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø–µ—Ä—à–æ–º—É —Å—Ç–æ–≤–ø—Ü—ñ
                if len(row) < 5 or not row[4]:  # –Ø–∫—â–æ –ø–æ–ª–µ Telegram ID (—Å—Ç–æ–≤–ø–µ—Ü—å 5) –ø–æ—Ä–æ–∂–Ω—î
                    contact_sheet.update_cell(idx, 5, telegram_id)
                    logging.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ Telegram ID {telegram_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                break
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Telegram ID: {e}")

@router.message(F.text == "/start")
async def send_welcome(message: types.Message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
    await message.answer(
        "üì≤ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:",
        reply_markup=await get_phone_keyboard()
    )

@router.message(F.contact)
async def handle_contact(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É —Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è."""
    if message.contact.user_id != message.from_user.id:
        await message.answer("‚ùå –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é 'üì≤ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º'.")
        return

    phone_number = auth_manager.clean_phone_number(message.contact.phone_number)
    logging.info(f"[DEBUG] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä: {phone_number}")

    try:
        user_data = await auth_manager.check_user_in_database(phone_number)
        logging.info(f"[DEBUG] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ auth.py: {user_data}")
        if user_data:
            # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–µ—Ä—à–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è —Ç–∞–±–ª–∏—Ü—ñ `contact`
            user_id = user_data.get("id", "–Ω–µ–≤—ñ–¥–æ–º–æ")
            user_name = user_data.get("name", "–Ω–µ–∑–Ω–∞–π–æ–º–∏–π")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ Telegram ID —É Google Sheets
            await update_telegram_id(user_id, message.from_user.id)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É
            USER_DATA[message.from_user.id] = {
                "id": user_id,  # ID –∑ –ø–µ—Ä—à–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è Google Sheets
                "name": user_name,
                "phone": phone_number,
                "tg_id": message.from_user.id
            }

            await message.answer(
                f"‚úÖ –í—ñ—Ç–∞—é, *{user_name}*! –í–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ. üéâ",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardRemove()
            )
            await message.answer("üìå –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=get_main_menu())
        else:
            await message.answer("‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        logging.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")

### ‚úÖ **–û–ë–†–û–ë–ù–ò–ö–ò CALLBACK-–ö–ù–û–ü–û–ö**
@router.callback_query(F.data == "sklad")
async def handle_sklad_call(call: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ 'üì¶ –°–∫–ª–∞–¥'."""
    await call.answer()
    user_data = USER_DATA.get(call.from_user.id, {
        "id": "–Ω–µ–≤—ñ–¥–æ–º–æ",
        "name": call.from_user.first_name, 
        "phone": "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ",
        "tg_id": call.from_user.id
    })
    await handle_sklad(call.message, user_data)

@router.callback_query(F.data == "check_stock")
async def handle_stock_check(call: types.CallbackQuery):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ (–≥–µ–Ω–µ—Ä—É—î PDF)."""
    await call.answer()
    await show_all_stock(call)

@router.callback_query(F.data == "tasks")
async def handle_tasks(call: types.CallbackQuery):
    """–†–æ–∑–¥—ñ–ª '–ó–∞–≤–¥–∞–Ω–Ω—è' (–ø–æ–∫–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)."""
    await call.answer()
    await call.message.answer("üìù –†–æ–∑–¥—ñ–ª '–ó–∞–≤–¥–∞–Ω–Ω—è' —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")

@router.callback_query(F.data == "forme")
async def handle_forme(call: types.CallbackQuery):
    """–†–æ–∑–¥—ñ–ª '–î–ª—è –º–µ–Ω–µ' ‚Äì –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å."""
    await call.answer()
    await show_my_orders(call.message)

@router.message(F.text == "üîÑ –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É")
async def restart_handler(message: types.Message):
    """–ö–Ω–æ–ø–∫–∞ '–ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É' –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    await message.answer("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É", reply_markup=ReplyKeyboardRemove())
    await message.answer("üìå –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=get_main_menu())

setup_dialogs(dp)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling —Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ WebApp API."""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
