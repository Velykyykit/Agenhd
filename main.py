import os
import gspread
import asyncio
from fpdf import FPDF
from datetime import datetime
import pytz
from aiogram import Bot, types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from menu.keyboards import get_restart_keyboard

router = Router()

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –¥–ª—è –ö–∏—î–≤–∞
kyiv_tz = pytz.timezone("Europe/Kiev")

CREDENTIALS_PATH = os.path.join("/app", os.getenv("CREDENTIALS_FILE"))
FONT_PATH = os.path.join("/app/config/fonts", "DejaVuSans.ttf")


def get_sklad_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ó—Ä–æ–±–∏—Ç–∏ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="order")],
        [InlineKeyboardButton(text="üìä –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ù–∞—è–≤–Ω—ñ—Å—Ç—å", callback_data="check_stock")]
    ])


@router.callback_query(lambda call: call.data == "sklad")
async def handle_sklad(call: types.CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ —Å–∫–ª–∞–¥—É."""
    await call.message.answer("üì¶ –í–∏ —É —Ä–æ–∑–¥—ñ–ª—ñ —Å–∫–ª–∞–¥—É. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_sklad_menu())
    keyboard = await get_restart_keyboard()
    await call.message.answer("üîÑ –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)


async def get_all_stock():
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑—ñ —Å–∫–ª–∞–¥—É."""
    gc = gspread.service_account(filename=CREDENTIALS_PATH)
    sh = gc.open_by_key(os.getenv("SHEET_SKLAD"))
    worksheet = sh.worksheet("SKLAD")

    data = await asyncio.to_thread(worksheet.get_all_values)
    stock_items = [{
        "id": row[0],
        "course": row[1],
        "name": row[2],
        "stock": int(row[3]) if row[3].isdigit() else 0,
        "available": int(row[4]) if row[4].isdigit() else 0,
        "price": int(row[5]) if row[5].isdigit() else 0
    } for row in data[1:]]

    return stock_items


@router.callback_query(lambda call: call.data == "check_stock")
async def show_all_stock(call: types.CallbackQuery):
    """–ì–µ–Ω–µ—Ä—É—î PDF-—Ñ–∞–π–ª –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    wait_message = await call.message.answer("‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ, –¥–æ–∫—É–º–µ–Ω—Ç —Ñ–æ—Ä–º—É—î—Ç—å—Å—è...")

    try:
        if not os.path.exists(FONT_PATH):
            await call.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª —à—Ä–∏—Ñ—Ç—É DejaVuSans.ttf –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        items = await get_all_stock()
        now = datetime.now(kyiv_tz).strftime("%Y-%m-%d_%H-%M")
        filename = f"sklad_HD_{now}.pdf"

        pdf = FPDF()
        pdf.add_page()
        pdf.add_font("DejaVu", "", FONT_PATH, uni=True)
        pdf.set_font("DejaVu", '', 12)

        pdf.cell(200, 10, f"–ù–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ (—Å—Ç–∞–Ω–æ–º –Ω–∞ {now})", ln=True, align="C")
        pdf.ln(10)

        pdf.cell(30, 8, "ID", border=1, align="C")
        pdf.cell(80, 8, "–¢–æ–≤–∞—Ä", border=1, align="C")
        pdf.cell(30, 8, "–ù–∞ —Å–∫–ª–∞–¥—ñ", border=1, align="C")
        pdf.cell(30, 8, "–¶—ñ–Ω–∞", border=1, align="C")
        pdf.ln()

        for item in items:
            pdf.cell(30, 8, str(item["id"]), border=1, align="C")
            pdf.cell(80, 8, item["name"], border=1, align="L")
            pdf.cell(30, 8, str(item["stock"]), border=1, align="C")
            pdf.cell(30, 8, f"{item['price']}‚Ç¥", border=1, align="C")
            pdf.ln()

        pdf.output(filename)

        await call.message.delete()
        file = FSInputFile(filename)
        await call.message.answer_document(file, caption="üìÑ –û—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞—è–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ.")

        os.remove(filename)

    except Exception as e:
        await call.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞!")
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")


@router.callback_query(lambda call: call.data == "order")
async def show_courses_for_order(call: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."""
    gc = gspread.service_account(filename=CREDENTIALS_PATH)
    sh = gc.open_by_key(os.getenv("SHEET_SKLAD"))
    worksheet = sh.worksheet("dictionary")  # –ê—Ä–∫—É—à —ñ–∑ –∫—É—Ä—Å–∞–º–∏

    courses = await asyncio.to_thread(worksheet.col_values, 1)
    if not courses:
        await call.message.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=course, callback_data=f"course_{course}")] for course in courses
    ])

    await call.message.answer("üìö –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=markup)
