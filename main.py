import asyncio
import logging
import os
import json

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import (
    ReplyKeyboardRemove, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è (–æ–Ω–æ–≤–ª–µ–Ω–∏–π –º–æ–¥—É–ª—å)
from config.auth import AuthManager

# –õ–æ–≥—ñ–∫–∞ —Å–∫–ª–∞–¥—É
from data.sklad.sklad import handle_sklad, show_all_stock

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
from menu.keyboards import get_phone_keyboard, get_restart_keyboard

# === aiogram-dialog ===
from aiogram_dialog import setup_dialogs, StartMode
from aiogram_dialog import DialogManager
from data.sklad.order import order_dialog, OrderSG  

# –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å (¬´–î–ª—è –º–µ–Ω–µ¬ª)
from data.For_me.me import show_my_orders

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TOKEN")
SHEET_ID = os.getenv("SHEET_ID")
SHEET_SKLAD = os.getenv("SHEET_SKLAD")
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE")

if not TOKEN or not SHEET_ID or not SHEET_SKLAD or not CREDENTIALS_FILE:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è JSON-—Ä—è–¥–∫–∞ —É Python-—Å–ª–æ–≤–Ω–∏–∫
try:
    CREDENTIALS_JSON = json.loads(CREDENTIALS_FILE)
except json.JSONDecodeError as e:
    raise ValueError(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É JSON –≤ CREDENTIALS_FILE: {e}")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ü–µ—Ä–µ–¥–∞—î–º–æ JSON –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
auth_manager = AuthManager(SHEET_ID, CREDENTIALS_JSON)

def get_main_menu():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –°–∫–ª–∞–¥", callback_data="sklad")],
        [InlineKeyboardButton(text="üìù –ó–∞–≤–¥–∞–Ω–Ω—è", callback_data="tasks")],
        [InlineKeyboardButton(text="üôã‚Äç‚ôÇÔ∏è –î–ª—è –º–µ–Ω–µ", callback_data="forme")]
    ])

@router.message(F.text == "/start")
async def send_welcome(message: types.Message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
    await message.answer(
        "üì≤ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:",
        reply_markup=await get_phone_keyboard()
    )

@router.message(F.contact)
async def handle_contact(message: types.Message):
    """
    –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç —ñ –≤–∏–∫–æ–Ω—É—î –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é.
    """
    if message.contact.user_id != message.from_user.id:
        await message.answer("‚ùå –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é 'üì≤ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º'")
        return

    phone_number = auth_manager.clean_phone_number(message.contact.phone_number)
    logging.info(f"[DEBUG] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä: {phone_number}")

    try:
        user_data = await auth_manager.check_user_in_database(phone_number)
        logging.info(f"[DEBUG] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ auth.py: {user_data}")
        if user_data:
            await message.answer(
                f"‚úÖ –í—ñ—Ç–∞—é, *{user_data['name']}*! –í–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ. üéâ",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardRemove()
            )
            await message.answer("üìå –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=get_main_menu())
        else:
            await message.answer("‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        logging.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")

# –ó–∞–º—ñ—Å—Ç—å DialogRegistry: –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ middleware –¥–ª—è aiogram-dialog
setup_dialogs(dp)
dp.include_router(order_dialog)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling."""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
