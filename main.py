import telebot
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import datetime
import os
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# Telegram Bot Token
TOKEN = os.getenv("TOKEN")  
bot = telebot.TeleBot(TOKEN)

# Google Sheets Setup
SHEET_ID = os.getenv("SHEET_ID")
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE")

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet_crm = client.open_by_key(SHEET_ID).worksheet("CRM")
sheet_base = client.open_by_key(SHEET_ID).worksheet("base")

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_data = {}

@bot.message_handler(commands=["start"])
def send_welcome(message):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    phone_button = KeyboardButton("üì≤ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    markup.add(phone_button)
    
    bot.send_message(
        message.chat.id,
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:",
        reply_markup=markup
    )

@bot.message_handler(content_types=["contact"])
def verify_phone(message):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –±–∞–∑—ñ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –≤–∏–±–æ—Ä—É –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É."""
    if message.contact is None:
        bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    phone = message.contact.phone_number.strip()
    if not phone.startswith("+"):
        phone = f"+{phone}"  

    base_data = sheet_base.get_all_values()
    phones_column = [row[1].strip().lstrip("'") for row in base_data[1:]]

    if phone in phones_column:
        row_index = phones_column.index(phone) + 1
        found_data = sheet_base.row_values(row_index + 1)

        user_name = found_data[2]  # –Ü–º'—è –∑ –±–∞–∑–∏ (–∫–æ–ª–æ–Ω–∫–∞ C)
        
        user_data[message.chat.id] = {
            "name": user_name,  
            "phone": phone,
            "email": found_data[3],  
            "responsibility": found_data[5]  
        }

        bot.send_message(
            message.chat.id,
            f"‚úÖ –î—è–∫—É—é, *{user_name}*! –í–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ.",
            parse_mode="Markdown"
        )

        choose_centre(message.chat.id)  # üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É

    else:
        bot.send_message(
            message.chat.id,
            "–í–∏–±–∞—á—Ç–µ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

def choose_centre(user_id):
    """–ó–∞–ø–∏—Ç—É—î –≤–∏–±—ñ—Ä –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É."""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü—ñ–≤–¥–µ–Ω–Ω–∏–π", callback_data="–ü—ñ–≤–¥–µ–Ω–Ω–∏–π"))
    markup.add(InlineKeyboardButton("–°–∏—Ö—ñ–≤", callback_data="–°–∏—Ö—ñ–≤"))
    bot.send_message(user_id, "üìç –û–±–µ—Ä—ñ—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω–∏–π —Ü–µ–Ω—Ç—Ä:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)  # üîπ –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ callback
def handle_callback_query(call):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_id = call.message.chat.id

    if call.data in ["–ü—ñ–≤–¥–µ–Ω–Ω–∏–π", "–°–∏—Ö—ñ–≤"]:
        user_data[user_id]["centre"] = call.data
        bot.send_message(user_id, "üìå –û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:")
        markup = InlineKeyboardMarkup()
        categories = ["–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ö–ª—ñ—î–Ω—Ç–∏", "–ü–µ—Ä—Å–æ–Ω–∞–ª", "–¢–æ–≤–∞—Ä–∏", "–§—ñ–Ω–∞–Ω—Å–∏", "–†–µ–º–æ–Ω—Ç", "–Ü–Ω—à–µ"]
        for category in categories:
            markup.add(InlineKeyboardButton(category, callback_data=category))
        bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:", reply_markup=markup)

    elif call.data in ["–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ö–ª—ñ—î–Ω—Ç–∏", "–ü–µ—Ä—Å–æ–Ω–∞–ª", "–¢–æ–≤–∞—Ä–∏", "–§—ñ–Ω–∞–Ω—Å–∏", "–†–µ–º–æ–Ω—Ç", "–Ü–Ω—à–µ"]:
        user_data[user_id]["category"] = call.data
        bot.send_message(user_id, "‚úç –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:")
        bot.register_next_step_handler(call.message, get_short_desc)

    elif call.data in ["–¢–µ—Ä–º—ñ–Ω–æ–≤–µ", "–°–µ—Ä–µ–¥–Ω—î", "–ù–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–µ"]:
        user_data[user_id]["urgency"] = call.data
        bot.send_message(user_id, "üì∏ –ü—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '-' —è–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ")
        bot.register_next_step_handler(call.message, get_photo)

def get_short_desc(message):
    """–û—Ç—Ä–∏–º—É—î –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è."""
    user_data[message.chat.id]["short_desc"] = message.text
    bot.send_message(message.chat.id, "üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ:")
    bot.register_next_step_handler(message, get_description)

def get_description(message):
    """–û—Ç—Ä–∏–º—É—î –ø–æ–≤–Ω–∏–π –æ–ø–∏—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è."""
    user_data[message.chat.id]["description"] = message.text
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üî• –¢–µ—Ä–º—ñ–Ω–æ–≤–µ", callback_data="–¢–µ—Ä–º—ñ–Ω–æ–≤–µ"))
    markup.add(InlineKeyboardButton("‚è≥ –°–µ—Ä–µ–¥–Ω—î", callback_data="–°–µ—Ä–µ–¥–Ω—î"))
    markup.add(InlineKeyboardButton("üïí –ù–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–µ", callback_data="–ù–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–µ"))
    bot.send_message(message.chat.id, "‚è≥ –û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ—Å—Ç—ñ:", reply_markup=markup)

def get_photo(message):
    """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –∞–±–æ –π–æ–≥–æ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ."""
    if message.photo:
        file_id = message.photo[-1].file_id  
        file_info = bot.get_file(file_id)
        photo_link = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"
        user_data[message.chat.id]["photo"] = photo_link
    else:
        user_data[message.chat.id]["photo"] = "-"

    save_to_google_sheets(message.chat.id)

def save_to_google_sheets(user_id):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —É Google Sheets."""
    data = user_data.get(user_id, {})
    last_row = len(sheet_crm.get_all_values())
    new_number = last_row + 1
    row = [
        new_number,
        datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        data.get("name", ""),
        data.get("phone", ""),
        data.get("email", ""),
        data.get("category", ""),
        data.get("centre", ""),
        data.get("short_desc", ""),
        data.get("description", ""),
        data.get("urgency", ""),
        data.get("photo", ""),
        data.get("responsibility", ""),
        "–í –æ–±—Ä–æ–±—Ü—ñ",
        ""
    ]
    sheet_crm.append_row(row)
    bot.send_message(user_id, "‚úÖ –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ —Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ–π –æ—Å–æ–±—ñ!")

bot.polling()
